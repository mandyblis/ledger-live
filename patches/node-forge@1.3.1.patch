diff --git a/CHANGELOG.md b/CHANGELOG.md
deleted file mode 100644
index 27d0e3a0073c20adff764c71575e200d6ac23432..0000000000000000000000000000000000000000
diff --git a/flash/README.md b/flash/README.md
deleted file mode 100644
index 1576ebf1a99dab1462caa81c14240864ed1454cb..0000000000000000000000000000000000000000
diff --git a/flash/package.json b/flash/package.json
deleted file mode 100644
index 92689fa9b24e93a631d2b52572030d7e17ccb10f..0000000000000000000000000000000000000000
diff --git a/lib/log.js b/lib/log.js
index 4ef700591e839ec5777844af11098c8d56ab2850..d18e5ea491c2114f8eb64b29b732a05aeae11116 100644
--- a/lib/log.js
+++ b/lib/log.js
@@ -5,8 +5,8 @@
  *
  * Copyright (c) 2008-2013 Digital Bazaar, Inc.
  */
-var forge = require('./forge');
-require('./util');
+var forge = require("./forge");
+require("./util");
 
 /* LOG API */
 module.exports = forge.log = forge.log || {};
@@ -25,7 +25,14 @@ module.exports = forge.log = forge.log || {};
  */
 // list of known levels
 forge.log.levels = [
-  'none', 'error', 'warning', 'info', 'debug', 'verbose', 'max'];
+  "none",
+  "error",
+  "warning",
+  "info",
+  "debug",
+  "verbose",
+  "max",
+];
 // info on the levels indexed by name:
 //   index: level index
 //   name: uppercased display name
@@ -44,13 +51,13 @@ var sConsoleLogger = null;
  * set the level such that only critical messages are seen but more verbose
  * messages are needed for debugging or other purposes.
  */
-forge.log.LEVEL_LOCKED = (1 << 1);
+forge.log.LEVEL_LOCKED = 1 << 1;
 /**
  * Always call log function. By default, the logging system will check the
  * message level against logger.level before calling the log function. This
  * flag allows the function to do its own check.
  */
-forge.log.NO_LEVEL_CHECK = (1 << 2);
+forge.log.NO_LEVEL_CHECK = 1 << 2;
 /**
  * Perform message interpolation with the passed arguments. "%" style
  * fields in log messages will be replaced by arguments as needed. Some
@@ -58,14 +65,14 @@ forge.log.NO_LEVEL_CHECK = (1 << 2);
  * message will be available as 'message' and the interpolated version will
  * be available as 'fullMessage'.
  */
-forge.log.INTERPOLATE = (1 << 3);
+forge.log.INTERPOLATE = 1 << 3;
 
 // setup each log level
-for(var i = 0; i < forge.log.levels.length; ++i) {
+for (var i = 0; i < forge.log.levels.length; ++i) {
   var level = forge.log.levels[i];
   sLevelInfo[level] = {
     index: i,
-    name: level.toUpperCase()
+    name: level.toUpperCase(),
   };
 }
 
@@ -74,17 +81,17 @@ for(var i = 0; i < forge.log.levels.length; ++i) {
  *
  * @param message message object
  */
-forge.log.logMessage = function(message) {
+forge.log.logMessage = function (message) {
   var messageLevelIndex = sLevelInfo[message.level].index;
-  for(var i = 0; i < sLoggers.length; ++i) {
+  for (var i = 0; i < sLoggers.length; ++i) {
     var logger = sLoggers[i];
-    if(logger.flags & forge.log.NO_LEVEL_CHECK) {
+    if (logger.flags & forge.log.NO_LEVEL_CHECK) {
       logger.f(message);
     } else {
       // get logger level
       var loggerLevelIndex = sLevelInfo[logger.level].index;
       // check level
-      if(messageLevelIndex <= loggerLevelIndex) {
+      if (messageLevelIndex <= loggerLevelIndex) {
         // message critical enough, call logger
         logger.f(logger, message);
       }
@@ -98,12 +105,14 @@ forge.log.logMessage = function(message) {
  *
  * @param message a message log object
  */
-forge.log.prepareStandard = function(message) {
-  if(!('standard' in message)) {
+forge.log.prepareStandard = function (message) {
+  if (!("standard" in message)) {
     message.standard =
       sLevelInfo[message.level].name +
       //' ' + +message.timestamp +
-      ' [' + message.category + '] ' +
+      " [" +
+      message.category +
+      "] " +
       message.message;
   }
 };
@@ -114,11 +123,11 @@ forge.log.prepareStandard = function(message) {
  *
  * @param message a message log object.
  */
-forge.log.prepareFull = function(message) {
-  if(!('full' in message)) {
+forge.log.prepareFull = function (message) {
+  if (!("full" in message)) {
     // copy args and insert message at the front
     var args = [message.message];
-    args = args.concat([] || message['arguments']);
+    args = args.concat([] || message["arguments"]);
     // format the message
     message.full = forge.util.format.apply(this, args);
   }
@@ -130,8 +139,8 @@ forge.log.prepareFull = function(message) {
  *
  * @param message a message log object.
  */
-forge.log.prepareStandardFull = function(message) {
-  if(!('standardFull' in message)) {
+forge.log.prepareStandardFull = function (message) {
+  if (!("standardFull" in message)) {
     // FIXME implement 'standardFull' logging
     forge.log.prepareStandard(message);
     message.standardFull = message.standard;
@@ -139,14 +148,14 @@ forge.log.prepareStandardFull = function(message) {
 };
 
 // create log level functions
-if(true) {
+if (true) {
   // levels for which we want functions
-  var levels = ['error', 'warning', 'info', 'debug', 'verbose'];
-  for(var i = 0; i < levels.length; ++i) {
+  var levels = ["error", "warning", "info", "debug", "verbose"];
+  for (var i = 0; i < levels.length; ++i) {
     // wrap in a function to ensure proper level var is passed
-    (function(level) {
+    (function (level) {
       // create function for this level
-      forge.log[level] = function(category, message/*, args...*/) {
+      forge.log[level] = function (category, message /*, args...*/) {
         // convert arguments to real array, remove category and message
         var args = Array.prototype.slice.call(arguments).slice(2);
         // create message object
@@ -156,7 +165,7 @@ if(true) {
           level: level,
           category: category,
           message: message,
-          'arguments': args
+          arguments: args,
           /*standard*/
           /*full*/
           /*fullMessage*/
@@ -186,12 +195,12 @@ if(true) {
  *
  * @return a logger object.
  */
-forge.log.makeLogger = function(logFunction) {
+forge.log.makeLogger = function (logFunction) {
   var logger = {
     flags: 0,
-    f: logFunction
+    f: logFunction,
   };
-  forge.log.setLevel(logger, 'none');
+  forge.log.setLevel(logger, "none");
   return logger;
 };
 
@@ -203,12 +212,12 @@ forge.log.makeLogger = function(logFunction) {
  *
  * @return true if set, false if not.
  */
-forge.log.setLevel = function(logger, level) {
+forge.log.setLevel = function (logger, level) {
   var rval = false;
-  if(logger && !(logger.flags & forge.log.LEVEL_LOCKED)) {
-    for(var i = 0; i < forge.log.levels.length; ++i) {
+  if (logger && !(logger.flags & forge.log.LEVEL_LOCKED)) {
+    for (var i = 0; i < forge.log.levels.length; ++i) {
       var aValidLevel = forge.log.levels[i];
-      if(level == aValidLevel) {
+      if (level == aValidLevel) {
         // set level
         logger.level = level;
         rval = true;
@@ -226,8 +235,8 @@ forge.log.setLevel = function(logger, level) {
  * @param logger the target logger.
  * @param lock boolean lock value, default to true.
  */
-forge.log.lock = function(logger, lock) {
-  if(typeof lock === 'undefined' || lock) {
+forge.log.lock = function (logger, lock) {
+  if (typeof lock === "undefined" || lock) {
     logger.flags |= forge.log.LEVEL_LOCKED;
   } else {
     logger.flags &= ~forge.log.LEVEL_LOCKED;
@@ -239,14 +248,14 @@ forge.log.lock = function(logger, lock) {
  *
  * @param logger the logger object.
  */
-forge.log.addLogger = function(logger) {
+forge.log.addLogger = function (logger) {
   sLoggers.push(logger);
 };
 
 // setup the console logger if possible, else create fake console.log
-if(typeof(console) !== 'undefined' && 'log' in console) {
+if (typeof console !== "undefined" && "log" in console) {
   var logger;
-  if(console.error && console.warn && console.info && console.debug) {
+  if (console.error && console.warn && console.info && console.debug) {
     // looks like Firebug-style logging is available
     // level handlers map
     var levelHandlers = {
@@ -254,34 +263,34 @@ if(typeof(console) !== 'undefined' && 'log' in console) {
       warning: console.warn,
       info: console.info,
       debug: console.debug,
-      verbose: console.debug
+      verbose: console.debug,
     };
-    var f = function(logger, message) {
+    var f = function (logger, message) {
       forge.log.prepareStandard(message);
       var handler = levelHandlers[message.level];
       // prepend standard message and concat args
       var args = [message.standard];
-      args = args.concat(message['arguments'].slice());
+      args = args.concat(message["arguments"].slice());
       // apply to low-level console function
       handler.apply(console, args);
     };
     logger = forge.log.makeLogger(f);
   } else {
     // only appear to have basic console.log
-    var f = function(logger, message) {
+    var f = function (logger, message) {
       forge.log.prepareStandardFull(message);
       console.log(message.standardFull);
     };
     logger = forge.log.makeLogger(f);
   }
-  forge.log.setLevel(logger, 'debug');
+  forge.log.setLevel(logger, "debug");
   forge.log.addLogger(logger);
   sConsoleLogger = logger;
 } else {
   // define fake console.log to avoid potential script errors on
   // browsers that do not have console logging
   console = {
-    log: function() {}
+    log: function () {},
   };
 }
 
@@ -297,19 +306,21 @@ if(typeof(console) !== 'undefined' && 'log' in console) {
  * after console.level is processed.  Useful to force a level of verbosity
  * that could otherwise be limited by a user config.
  */
-if(sConsoleLogger !== null &&
-  typeof window !== 'undefined' && window.location
+if (
+  sConsoleLogger !== null &&
+  typeof window !== "undefined" &&
+  window.location &&
+  window.location.href
 ) {
   var query = new URL(window.location.href).searchParams;
-  if(query.has('console.level')) {
+  if (query.has("console.level")) {
     // set with last value
-    forge.log.setLevel(
-      sConsoleLogger, query.get('console.level').slice(-1)[0]);
+    forge.log.setLevel(sConsoleLogger, query.get("console.level").slice(-1)[0]);
   }
-  if(query.has('console.lock')) {
+  if (query.has("console.lock")) {
     // set with last value
-    var lock = query.get('console.lock').slice(-1)[0];
-    if(lock == 'true') {
+    var lock = query.get("console.lock").slice(-1)[0];
+    if (lock == "true") {
       forge.log.lock(sConsoleLogger);
     }
   }
